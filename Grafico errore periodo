####################################################################
programma che calcola l'errore relativo del periodo come sviluppo 
rispetto a quello calcolato numericamente in *Integralle ellittico*
####################################################################

import math
from matplotlib import pyplot as py
import numpy as np
import csv

termini_max = 6
lista = np.zeros(termini_max+1)
n_intervalli = 500
angoli = [i for i in range(500)]

------- funzione ricorsiva che calcola il coefficiente dell'n-esimo termine dello sviluppo del periodo ------- 

def n_coeff(angle, n):                  
  if n == 0:                    
    return 1
  else: 
    return n_coeff(angle, n-1)*(math.sin(angle*math.pi/(2*n_intervalli))*(2*n-1)/(2*n))**2
    
------- funzione ricorsiva che calcola il periodo T_2y sommando i coefficienti ------- 

def int_approx(angle, terms):
  sum = 0        
  for i in range(terms+1):      
    sum += n_coeff(angle, i)
  return sum

------- viene calcolato l'errore confrontando int_approx e i dati nel csv, poi viene messo l'errore in una lista ------- 

with open('integral2.csv', newline='') as csv_file:
  csv_reader = csv.reader(csv_file, quoting=csv.QUOTE_NONNUMERIC)
  rows=[r[0] for r in csv_reader]
  for j in range(termini_max):
    listone = np.zeros(n_intervalli)
    for x in range(n_intervalli):
      listone[x] = abs((int_approx(x,j)-float(rows[x]))/float(rows[x]))*100
    py.plot(angoli,listone,label=r"$T_{%i}$"%(2*j))

------- la lista viene plottata ------- 

py.xlim(0, 250)
py.ylim(0, 16)
#py.xticks([0,42,83,125,167,208,250,292,333,375,417,458,500],["0","15","30","45","60","75","90","105","120","135","150","165","180"])
py.xticks([0,42,83,125,167,208,250],["0","15","30","45","60","75","90"])
py.xlabel(r"$\theta_{0}$ (gradi)")
py.ylabel("Errore percentuale (%)")
py.grid(ls="--", alpha=0.6)
py.legend(loc="best")
py.show()
